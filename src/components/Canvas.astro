<script>
  //importar del astro
  import { AnaliticVoid, calcularFichaAMover } from "./Analizador";

  // importar del html
  const canvas = document.querySelector("canvas");
  const ctx = canvas.getContext("2d");
  const ganarElement = document.getElementById("ganar"); //un string de tipo p
  const comenzar = document.getElementById("comenzar");

  let validarComienzo = false;
  const Rect_width = 150;
  const Rect_height = 150;
  let tam = Number(localStorage.getItem("rangeMatriz")) ?? 3; //tamaño
  var primVes = true; //verificar si ha ganado
  canvas.width = Rect_width * tam;
  canvas.height = Rect_height * tam;

  ctx.scale(tam, tam);

  const puzzleSize = tam; // Tamaño del rompecabezas (x*x)
  const piecesNew = generatePuzzle();
  const emptyPiece = { row: puzzleSize - 1, col: puzzleSize - 1 }; // Posición de la pieza vacía

  //fuente de letras
  function calculateFontSize() {
    // Ajusta estos valores según tus preferencias
    const baseFontSize = 30; // Tamaño base de la letra
    const minFontSize = 10; // Tamaño mínimo de la letra
    const maxTam = 9; // Tamaño máximo del canvas

    // Calcula el tamaño de la letra en función del tamaño del canvas
    const fontSize =
      baseFontSize - ((tam - 3) * (baseFontSize - minFontSize)) / (maxTam - 3);

    return fontSize;
  }

  // Verivficar si ha ganado el jugador

  function verificarGanador() {
    if (JSON.stringify(pieces) === JSON.stringify(piecesNew)) {
      ganarElement.textContent = "Has ganado";
    } else {
      ganarElement.textContent = "Esperando...";
    }
  }

  // generar puzzle
  function generatePuzzle() {
    let pieces = [];
    let counter = 1;

    for (let i = 0; i < puzzleSize; i++) {
      for (let j = 0; j < puzzleSize; j++) {
        pieces.push({ row: i, col: j, number: counter++ });
      }
    }

    // Remover la última pieza (la vacía)
    pieces.pop();
    return pieces;
  }
  let pieces = generatePuzzle(); // Generar el rompecabezas

  //Dibujar con drow

  const fontSize = calculateFontSize();
  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    pieces.forEach((piece) => {
      const x = piece.col * (Rect_width / tam);
      const y = piece.row * (Rect_height / tam);

      ctx.fillStyle = "#ffffff";
      ctx.fillRect(x, y, Rect_width / tam, Rect_height / tam);
      ctx.strokeRect(x, y, Rect_width / tam, Rect_height / tam);
      ctx.fillStyle = "#000";
      ctx.font = `${fontSize}px Arial`;
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText(
        piece.number,
        x + Rect_width / (2 * tam),
        y + Rect_height / (2 * tam)
      );
    });
    verificarGanador();
  }

  //Desorganizar

  function shufflePieces() {
    console.log("Barajando piezas...");
    for (let i = pieces.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      console.log(
        `Cambiando posición de la pieza ${pieces[i].number} desde 
        [${pieces[i].row}, ${pieces[i].col}] a [${pieces[j].row}, ${pieces[j].col}]`
      );

      // Intercambia las posiciones de las piezas en la matriz
      [pieces[i].row, pieces[j].row] = [pieces[j].row, pieces[i].row];
      [pieces[i].col, pieces[j].col] = [pieces[j].col, pieces[i].col];

      // Intercambia las piezas en la matriz
      [pieces[i], pieces[j]] = [pieces[j], pieces[i]];
    }
    console.log("¡Piezas barajadas!");
    draw(); // Agregar esta línea para actualizar la representación visual después de barajar
  }

  //mover las picesas

  function movePiece(row, col) {
    const piece = pieces.find((p) => p.row === row && p.col === col);
    const emptyRow = emptyPiece.row;
    const emptyCol = emptyPiece.col;

    if (
      (Math.abs(row - emptyRow) === 1 && col === emptyCol) ||
      (Math.abs(col - emptyCol) === 1 && row === emptyRow)
    ) {
      [piece.row, emptyPiece.row] = [emptyPiece.row, piece.row];
      [piece.col, emptyPiece.col] = [emptyPiece.col, piece.col];

      // Imprimir en consola la pieza movida
      console.log(
        `Se movió la pieza ${piece.number} a la posición [${piece.row},
         ${piece.col}] y las nueva posicion vacia es [${emptyPiece.row}, ${emptyPiece.col}]`
      );
    }
    draw();
  }
  //calcular

  // Para el mouse

  comenzar.addEventListener("click", function () {
    validarComienzo = !validarComienzo;
  });
  canvas.addEventListener("click", function (event) {
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;

    // Escala las coordenadas del evento del mouse a las dimensiones reales del canvas
    const clickedRow = Math.floor((mouseY / rect.height) * puzzleSize);
    const clickedCol = Math.floor((mouseX / rect.width) * puzzleSize);

    movePiece(clickedRow, clickedCol);
  });

  //Refrescar frame
  function update() {
    draw();
    if (primVes) {
      primVes = false;
      shufflePieces();
      console.log(pieces);
      console.log(emptyPiece);
    }
    if (validarComienzo) {
      const valortemp = piecesNew.filter((p) => {
        return pieces.some((piece) => {
          return (
            p.row !== piece.row &&
            p.col !== piece.col &&
            p.number === piece.number
          );
        });
      });
      valortemp.forEach((p) => {
        console.log(p.number);
      });
      const calcular = calcularFichaAMover(
        pieces,
        AnaliticVoid(emptyPiece, tam),
        piecesNew
      );
      movePiece(calcular.fichaAMover[0], calcular.fichaAMover[1]);
    }
    window.requestAnimationFrame(update);
  }

  update();
</script>
